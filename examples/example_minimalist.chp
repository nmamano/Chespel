config {
    centipawn_value = 0.01;
    debug = true;
}

global [[bool]] globals_stuff = [ [], [[] in [ [] ]] ];

//rule board_stuff {
//    [cell] x = $a1..b1;
//    [row] y = $1..2;
//    [rank] z = $r1..2;
//    [file] w = $a..h;
//    x = x ++ [$h8];
//    y = y ++ [$3];
//    z = z ++ [$r2];
//    w = w ++ [$b];
//    forall (cell_ in x ++ $a1..h8) {
//        score 1;
//    }
//    score 4;
//}

void myFun() {
    return ;
}

rule name_collpase
    do if false
{
    num x = 2;
    score x;
    num it_1 = 23;
    num p = 23;
    forall (p in [[], [12,3], [4]]) { score 2; }
    num tmp = 20;
    score 20, "patates " ++ "i " ++ true ++ " " ++ $1 ++ " " ++ spawns[0] ;
    num l = 20;
    if (true) {
        num x;
        [num] y = [x]; //[num] x = [x];
    }
    string str = [true] ++ ( [] ++ " llista" );
    [bool] prova = [true, false];
    forall (c in cells) {
        score 0, "" ++ ($a1 + ($h8 - $a1)) ++ " " ++ ($2-$1) ++ " " ++ globals_stuff[1][0] ++ " " ++ globals_stuff[0].len ++ " " ++ globals_stuff[1].len;
    }
    num x0, y0;
    x0 = 5;
    y0 = 5;
    score 0, "" ++ (x0+y0);

    return ;
}

rule board_stuff sym
    do if false
{
    [cell] a1_a2 = $a1..a2;
    [rank] x = $r1..2;
    [row] y = $1..2;
    score 0, "" ++ x ++ " " ++ x.len ++ " " ++ ($r1 == $1) ++ " " ++ (x == $8..7);
    forall (c in $g3..b1) {
        score 0, "" ++ c;
    }

//    forall (p in spawns) {
//        score 0, "" ++ p.rank ++ " " ++ p;
//    }
//    [row] y = $1..2;
//    [rank] z = $r1..2;
//    [file] w = $a..h;
//    x = x ++ [$h8];
//    y = y ++ [$3];
//    z = z ++ [$r2];
//    w = w ++ [$b];
//    forall (cell_ in (x ++ $a1..h8)) {
//        score 1;
//    }
    score 4;
}

void add_3 ([[num]] &x) { x = x ++[[3,3,3]]; }

void func ( num & x, [num] l) {
    forall( elem in l) x = x+elem;
}

[num] get_what_you_want (bool p) {
    if (p) return [0];
    else return [1];
}

rule empty_lists
    do if [] in [ [ [ ] ] , [] ++ []] and false
{
    [cell] x0 = [];
    [[cell]] x1 = [x0];
    [[row]] r1 = [[], []];
    [[num]] n = [ [2] ] ++ [[]];
    score 0, "" ++ n;
    [[[string]]] n2 = [[]] ++ [[[]]];
    score 0, "" ++ n2;
    if ([[]] in [[], [[]]]) score 23, "huehue";
    forall (list in n2)
        score 0, "" ++ list;
    //forall (p in [])
    //    score 1;
    if ( [] in [] ) score 0, "so sad";
    if ( [] in [ [[]], [] ] ) score 2000, "huehue, free points";
    [[num]] r = [];
    r = r ++ [ [2] ] ++ [ [] ] ++ [ [2,3,4] ];
    add_3(r);
    num p = r[0][0];
    func(p, r[3]);
    r[get_what_you_want( [[] in [[]]] [0] )[0]] = r[0] ++ [23];
    score 0, "" ++ r ++ " " ++ p ++ " r[2][1]=" ++ r[2][1];
}

global num patates = 23;
global [piece] all_pawns = spawns ++ rpawns;
global num global_num = 23 * 1 - 4 + (23 + 4) * 2;
global bool global_bool = global_num < 2;
global num global_num2 = ([].len) + 5 * 23;
global num global_num3 = -2;
global bool global_bool2 = not true;


rule global_assignments sym, opening, midgame 
    do if false
{
    string patates = "patates";
    patates = "i dracs";
    //patates = 22;
    score 0, "patates " ++ patates;
    score 0, "" ++ all_pawns;
    score 0, "self_pawns: " ++ spawns ++ ", rival_pawns: " ++ rpawns;
    score 0, "false : " ++ global_bool2;
}


global rank global_rank = $r1;

rule predefined_stuff sym 
    do if $r1 == global_rank and false // execute only for white
{
    [string] out = ["spieces " ++ spieces,  "spawns " ++ spawns, "srooks " ++ srooks,  "sbishops " ++ sbishops, "skings " ++ skings, "squeens " ++ squeens, "sknights " ++ sknights] ;
    out = out ++ ["rpieces " ++ rpieces,  "rpawns " ++ rpawns, "rrooks " ++ rrooks,  "rbishops " ++ rbishops, "rkings " ++ rkings, "rqueens " ++ rqueens, "rknights " ++ rknights] ;
    forall (str in out)
        score 0, str;
    score 1, "Final score";

    forall (i in $a1..a3) score 0, "" ++ (i - $a1);
}


rule centerDomination sym, opening, midgame { 
    forall (p in spieces) { 
        if (false) score 0.01, "" ++ p; 
        else if (false) score 0.02, "" ++ p;
        else if (true) score 0.03;
        else score 0.03;
    }
}
