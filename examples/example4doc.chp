config {
    centipawn_value = 1;
    default_PStables = true;
    debug = true;
}

rule totalPieceValue sym  {
	forall (p in spieces) score p.value, "value of " ++ p;
}

rule centerDomination sym, opening, midgame {
	forall (p in spieces) {
		if (p.cell.inCenter) score 12, "piece in center square " ++ p.cell;
		else if (p.cell.inExpandedCenter) score 4, "piece in expanded center square " ++ p.cell;
	}
}

rule castling sym,opening,midgame {
	if (self.castled) score 30;
}

rule forwardPawnLine sym, opening, endgame {
	forall (p in spawns)
		score (p.rank - p.startingRank) * 3, "pawn " ++ p ++ " advanced " ++ (p.rank - p.startingRank) ++ " rows";
}

rule doubledPawns sym {
	forall (p1 in spawns) {
		forall (p2 in spawns) {
			if (p1.rank < p2.rank and p1.file == p2.file)
				score -20, "doubled pawn at file " ++ p1.file;
		}
	}
}

/* A piece is strongly covered if it is covered by a
piece of less value which is also strongly covered or
if it is a pawn */
bool stronglyCovered(piece p) {
	if (p in spawns) return true;
	forall (p2 in p.coveredBy) {
		if (p2.value < p.value) {
			if (stronglyCovered(p2)) return true;
		}
	}
	return false;
}

rule stronglyCovered sym {
	forall (p in spieces) {
		if (not p in skings and not stronglyCovered(p))
			score -40, "piece " ++ p ++ " does not have adecuate support";
	}
}