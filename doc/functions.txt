Functions



-- FUNCTIONS
Functions or methods are used by instances of classes.
An instance can use methods of its class and,
in case of aggregate classes, methods of the classes of its components.

A function is invoked by placing '.' after an instance and the function name.
If it takes one or more parameters, they are surrounded by parentheses and separated by commas.
If a function takes no parameters, parentheses are not used.

Functions do not have side effects. They don't modify the instance that invokes them.
They return instances of a certain class (known as the return type).
As parameters, they can take textual representation of instances or method calls that return an instance of the required type, including operators.

Existing functions can not be modified, and no new functions can be added.



List of functions:

PIECE:
Cell cell: 		component accessor.
Player player:	component accessor.
Type type: 		component accessor.
Bool absolutePinned:	returns whether moving the piece would expose the king to a check.
Bool pinned:	returns whether moving the piece exposes a piece of higher value that either is hung or has higher value than the piece and the enemy attaking piece.
Bool backwardPawn: 	returns whether the piece is a pawn which is behind pawns of the same color and adjacent columns.
Bool isolatedPawn:	returns whether the piece is a pawn with no pawns of the same color in the adjacent columns.
Bool advancedPawn: 	returns whether the piece is a pawn in the 5th rank or higher.
Bool doubledPawn: 	returns whether the piece is a pawn which has other pawns of the same player in the same column.
Bool passedPawn:	returns whether the piece is a pawn in a column with no enemy pawns on it nor adjacent columns.
Bool enPassantPawn: returns whether the piece is a pawn which advanced 2 cells in the last move.
Bool badBishop:	returns whether the piece is a bishop which can't reach any enemy piece in any number of movements.
Bool blackCellBishop:	returns whether the piece is a bishop in black squares.
Bool whiteCellBishop: returns whether the piece is a bishop in white squares.
Bool fork:	returns whether the piece is attacking two enemy pieces, either of higher value or non protected.
Bool guarded: 		returns whether the piece is protected.
Bool exposed:	returns whether the piece is not covered.
Bool hanged:	returns whether the piece is not covered and under attack.
Bool makesCheck:	returns whether the piece is attacking the opponent's king.
Num numberOfMoves:	returns the number of moves availabe to the piece.
[Cell] moves:	returns the possible destinations of the piece.
[Cell] emptyCellMoves:	returns the possible destinations of the piece that do not contain any piece.
[Piece] coveredPieces:	returns the list of pieces guarded by this piece.
[Piece] singleCoveredPieces:	returns the list of pieces guarded by this piece and none else.
[Piece] threatenedPieces:	returns the list of pieces attacked by this piece.
[Piece] threatenedHangedPieces:	returns the list of hanged pieces attacked by this piece.
[Piece] reacheablePieces:	returns the list of pieces reachable by this piece (either allies or enemies).
[Piece] coveredBy:	returns the list of pieces covering this piece.
[Piece] threatenedBy:	returns the list of pieces attacking this piece.
[Piece] reachedBy:	returns the list of pieces that can reach this piece (either allies or enemies).

CELL:
[Piece] pieces:	returns a list of the players' pieces.
Row row: 		component accessor.
Col col: 		component accessor.
[Cell] diagonal:	returns the cells in diagonal with the cell.
Color color:	returns the color of the cell.
Bool inCenter:	returns whether it is one of the 4 central cells.
Bool inExpandedCenter:	returns whether it is one of the 16 central cells.
Bool enPassant:	returns whether a pawn which advanced 2 cells moved through this cell.
Bool guarded:	returns whether the piece is covered.
Bool inLongDiagonal:	returns whether the cell is one of the 2 main diagonals.


PLAYER:
[Piece] pieces:	returns a list of the players' pieces.
Bool castled: 	returns whether the player has castled.
Bool castledSide(Type side):	if side == king or queen, returns whether the player has castled.
								to the king or queen side respectively. Otherwise, it returns false.
Bool canCastle:	returns whether the player can castle in the current situation.
Bool hasCastlingAbility:	returns whether the player can manage to fulfill the necessary conditions to castle
							(i.e. it hasn't moved the king or both rocks).
Bool underCheck:	returns whether the player is under check.
Bool makesCheck:	returns whether the other player is under check.
Bool underDoubleCheck:	returns whether the player is under check by two different pieces.
Bool makesDoubleCheck:	returns whether the other player is under check by two different pieces.
Color color:	returns the color of the player.
Num totalValue:	returns the total value of the pieces of the player.
Num valueBalance:	returns the difference of points on the opponent.
Bool hasTurn:	returns whether its the player's turn.
[Piece] advancedPawns:	returns pawns in the 5th rank or higher.
[Piece] isolatedPawn:	returns isolated pawns. 
[Piece] doubledPawn: 	returns doubles pawns.
[Piece] backwardPawns:	returns pawns which are behind pawns of the same color and adjacent columns.
[Piece] passedPawns:	returns pawns in columns with no enemy pawns in that column or adjacent columns.
Bool battery: returns whether the player has an arrangement of two pieces in line with
			  the enemy king so that if the middle piece moves a discovered check will be delivered.
Bool bishopPair: returns whether the player has both bishops and the other player has one or zero.
Bool connectedRocks: returns whether both rocks of the player are in the same row or column with no pieces between them.
[Piece] guardedPieces: 	returns a list of the player's pieces which are covered by friendly pieces.
[Piece] exposedPieces: 	returns a list of the player's pieces which are not covered by friendly pieces.
[Piece] hangingPieces:	returns a list of the player's pieces which are not covered and are under attack.
Bool harrwitzBishops:	returns whether the player has both bishops in adjacent diagonals.
Row rank(Num n):	returns the row corresponding to the rank n.
Row homeRank:		returns the row corresponding to the rank 1.
[Piece] pinnedPieces:	returns a list of the player's pieces which are pinned.

TYPE:
[Piece] pieces(Player p):	returns a list of the pieces of this type and player p.
Num value:		returns the value of the piece
[Cell] startingPos(Color c):	returns the starting positions of the pieces of this type and color c.
Bool movesStraight:		returns whether the pieces of this type can move in a straight line.
Bool movesDiagonal:		returns whether the pieces of this type can move in a diagonal line.
Num alive(Player p):	returns the number of pieces of this type and player p alive.
Bool major:		returns whether the piece is a queen or rock.
Bool minor:		returns whether the piece is a knight or bishop.

ROW:
[Cell] cells:	returns a list of the row's cells.
[Piece] pieces:	returns a list of the pieces in the row.
Num rank(Player p):	returns the rank of the row for the given player.

COL:
[Cell] cells:	returns a list of the column's cells.
[Piece] pieces: returns a list of the pieces in the column.
[Type] startingTypes(Player p):		returns a list of the pieces that start at this column.
Bool closed: 	returns whether each player has at least one pawn in the column.
Bool halfOpen:	returns whether it has pawns of only one player.
Bool open:		returns whether it doesn't have pawns.
Bool isQueenSide:	returns whether it is the column a, b, c or d.
Bool isKingSide:	returns whether it is the column e, f, g or h.
Bool isCenter:		returns whether it is the column d or e.

COLOR:
Player player:	returns which player has this color.
Bool hasTurn:	returns whether the player whose turn is now has this color.
[Cell] cells:	returns the cells of this color.

BOOL:
-

NUM:
-

STRING:
-

LIST(X):
X head:		returns the first element of the list.
X last:		returns the last element of the list.
X elem(Num pos):	returns the element at the position pos of the list (starting at 0).
[X] tail:	returns the list except the first element.
Bool empty:	returns whether the list is empty.
Num length: returns the number of elements of the list.
[X] nub:	returns the list without repeated elements.
X min:	returns the smallest element of the list. Requires operator <.
X max:	returns the largest element of the list. Requires operator <.
[X] sort:	returns the list with the element sorted increasingly. Requires operator <.
[X] reverseSort:	returns the list with the element sorted decreasingly. Requires operator <.
Num sum:	returns the sum of the numbers of the list. Requires operator +.
Num product:	returns the product of the numbers of the list. Requires operator *.
Bool all:	returns whether all the elements of the list are true. Requires operator 'and'.
Bool any:	returns whether any of the elements of the list are true. Requires operator 'or'.