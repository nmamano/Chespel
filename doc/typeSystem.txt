Type system


-- INTRODUCTION

There are no basic types, only "classes", often refered to as types.
A class consists of a set of values, called domain, and a set of methods or functions.

Example:
Class: player
Domain: {me, foe}
Methods: {color, pieces, castled, underCheck, ...}

Existing classes can not be modified, and no new classes can be added.
The classes are:
Bool, Num, String, Row, Col, Type, Player, Cell, Piece, Color, List

An instance of a class is an entity which holds a value from the domain of the class and
which can use the class' methods.
Two instances are the same if they hold the same value.

Each instance might have associated a string representation, a textual representation and a numeric value.

Every instance has a string representation, which is a sequence of ASCII characters.
This allows instances to act as strings and be 'printed'.
The string representation is only 'seen' in the output of the program, not in the code.

The instances of some classes have a textual representation, which is a sequence of ASCII characters.
This allows them to appear explicitly in the code.
Instances of classes which do not have textual representation can't appear explicitly in the code, but they can still be binded to variables.
Classes which have a textual representation are called static classes.

The instances of some classes have a numerical value.
This allows the instance to act as a number.
If a method or operator expects a number and receives an instance of a class whose instances do not have a numeric value, an error is thrown.


-- STATIC CLASSES

Static classes are classes whose instances remain constant thorough time.
For example, there are always the same rows or types of pieces.
When a class is static, there is one instance for each value of the domain.

These are some of the static classes, together with its domains:
Bool: {true, false}
Row: {1,2,3,4,5,6,7,8}
Col: {a,b,c,d,e,f,g,h}
Type: {pawn,knight,bishop,rock,queen,king}
Player: {me,foe}
Color: {white,black}
Num: numbers with up to three decimal digits between -10000 and 10000
String: sequences of ascii characters


-- AGGREGATIONS

Some classes are aggregations of other classes:
A cell is the aggregation of a row and a col
A piece is the aggregation of a type, a player and a cell.

When a class is an aggregation, its domain is the cartesian product of the domains of its components.

Cell is a static class, but Piece is not: the pieces change positions, and may even die. This clearly shows that the number of instances change during time.

Supose class A has class B as component.
This means that any instance of class A "contains" exactly one instance of class B.
This means:
	1 - class A has a method named the name of B (in lower case) which returns an instance of B
	2 - instances of A can automatically use methods from class B, which is equivalent to first using
	the aforementioned method (to get an instance of B) and then using the method on the result.
	There is ambiguity when:
		- A and B have a method with the same name: in this case, the method of A is used.
		- A has 2 components B1, B2 with a method with the same name: in this case,
			A can't use the method directly (this gives error).

Examples:
Let p be an instance of Piece. p.type.value is equivalent to p.value, because p can use the method of the component class directly.
Let c be an instance of Cell. c.cells gives error because it is ambiguous whether it is calling the method cells of the row component or the col component.


Component hierarchy:
- Piece
	- Player
	- Type
	- Cell
		- Row
		- Col
- Color
- Bool
- Num
- String



-- LISTS

List is a special class, because they act as containers for instances of other classes.
As a class, it has its own methods.
They are homogenuous: all the instances it contains must be from the same class.
They can't contain instances of List nor String.
Some functions are limited to some contained class in particular.

A list can also use the methods of the class of the instances it contains. The result is the list of all the results.

List is, in general, a static class, except when it holds instances of a dynamic class.
When it holds instances of a static class, their textual representation is
the list of representations of the instances separated by commas
and surrounded by [ ].

The empty list is represented []. It is not commited to any particular containing class.
 


-- CLASS CLASSIFICATION SUMMARY


Class		Domain 		Aggregate 	Type 		Context				Operators
Piece		768			Yes 		Dynamic 	Chess specific		==, !=, in
Cell		64			Yes 		Static 		Chess specific		==, !=, in
Player		2			No 			Static 		Chess specific		==, !=, in
Type		6 			No 			Static 		Chess specific		==, !=, in
Row			8			No 			Static 		Chess specific		==, !=, in, *>, *<, *>=, *<=
Col			8			No 			Static 		Chess specific		==, !=, in
Color		2			No 			Static 		Chess specific		==, !=, in
Bool		2			No 			Static 		General 			==, !=, in, and, or, not		
Num			Infinite	No 			Static 		General 			==, !=, in, >, <, >=, <=, +, -, *, /
String		Infinite	No 			Static 		General 			++
List 		Infinite	No 			Static*		General 			++, in (as second parameter)


